#!/bin/bash

# MATCUTEST is the root directory of MatCUTEst, i.e., the directory where this script resides.
MATCUTEST="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

GITCU="git@github.com:equipez/matcutest_compiled.git"
TMPCU=/tmp/matcutest_compiled
TMPCS=/tmp/matcutest
README=$TMPCS/README.txt
CS7Z="$MATCUTEST"/matcutest.7z

rm -rf "$TMPCU" "$TMPCS" "$CS7Z"

mkdir -p "$TMPCS"

cat >$README << EOF
***************************************************************************                                 
MatCUTEst is a package facilitating the usage of CUTEst in MATLAB on Linux.

See https://github.com/ralna/CUTEst for CUTEst. 

ZHANG Zaikun, Hong Kong Polytechnic University, https://zhangzk.net                                     
                                                                                                        
June 2020, Hong Kong                                                                                    
                                                                                                        
Thank Dr. ClÃ©ment W. Royer ( https://www.lamsade.dauphine.fr/~croyer )                                  
for teaching me how to use CUTEst in MATLAB.                                                            
*************************************************************************** 

How to install and use it? 

In the sequel, "the current directory" means the directory containing this README file.

Below are the steps to follow. In case of any problem, contact me (www.zhangzk.net).

1. Start your MATLAB. In MATLAB, change your directory to the "mtools" folder in the 
   current directory, and execute

   setup

   It should print "Done."

2. After the above step, any CUTEst problem can be obtained in MATLAB by

   macup(PROBLEM_NAME)

   where PROBLEM_NAME is the name of the problem (a character string). For example, try

   macup('AKIVA')

   This should give you a structure containing the full information of problem AKIVA, 
   including its objective function, constraints (if any), starting point, etc.

   Try "help matcutest", "help macup", "help decup", and "help secup" in MATLAB for 
   more information.
EOF

cp -r "$MATCUTEST"/mtools "$TMPCS"
rm "$TMPCS"/mtools/src/setcuenv.m
rm "$TMPCS"/mtools/src/sifdir.m
rm "$TMPCS"/mtools/src/getcup.m
echo "1" > "$TMPCS"/mtools/GOTCUP

sed -i "s|setup has been done before. Remove the ''GOTCUP'' file in this directory if you want to redo it|Done|" "$TMPCS/mtools/setup.m"

# We use rsync to make a copy of $MATCUTEST/cutest excluding certain files.
# N.B.:
# 1. The directory may contain core files due to failures during previous tests.
# 2. The -x option of 7z can also exclude files with wildcards. However, it seems to require also
# the -r option to work properly with subdirectories, but -r is discouraged according to man 7z.
rsync -av "$MATCUTEST"/cutest/ "$TMPCS"/cutest/  --exclude='*.f' --exclude='core.*'

# Comments on 7z and its options:
# We choose 7z as it renders an outstanding compression ratio in this case: from 6GB down to 120MB.
# In contrast, zip produces an archive of 580MB, which is good, but not as good.
# -v90m sets the maximal size of the 7z file to 90M, so that they can be uploaded to GitHub;
# -mx=9 sets the compression ratio to the highest (it will be time-consuming);
# -t7z sets the compressing format to 7z (default).
7z a -v90m -mx=9 -t7z "$CS7Z" "$TMPCS"

# printf "\nPushing to the git repo of matcutest_compiled ...\n"
# cd "$(dirname "$TMPCU")" && git clone "$GITCU" && cd "$TMPCU" && cp "$CS7Z"* "$TMPCU" || exit 2
# git add -A && git commit -m "add/update $(basename "$CS7Z")" && git push origin main || exit 3
# printf "\nDone.\n"

# rm -rf "$TMPCU" "$TMPCS" "$CS7Z"*
